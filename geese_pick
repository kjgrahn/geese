#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
#
# $Id: geese_pick,v 1.14 2007-05-19 07:30:31 grahn Exp $
#
# Copyright (c) 2004, 2005, 2006 Jörgen Grahn
# All rights reserved.
#

import re
import os
import os.path
import getopt
import sys
import md5
import math
from geese import library

def md5sum(file):
    """Calculate the MD5 checksum of 'file'
    and return it as a string à la md5sum(1).
    """
    acc = md5.new()
    f = open(file, 'r')
    while 1:
        s = f.read(42*1024)
        if not s:
            break
        acc.update(s)
    f.close()
    return acc.hexdigest().lower()

class Child:
    """Wrapper for a forked command which gets killed
    (if it's still alive) when the object dies.
    This part is Unix-specific.
    """
    def __init__(self, cmd):
        self.pid = os.fork()
        # workaround for python 2.1 weirdness (or my misuse)
        self.os = os
        if not self.pid:
            argv = cmd.split(' ')
            try:
                os.execvp(argv[0], argv)
            except OSError, s:
                print >>sys.stderr, "couldn't execute `%s'" % cmd
                print >>sys.stderr, s
            sys.exit(-1)
    def __del__(self):
        try:
            self.os.kill(self.pid, 2)
            self.os.wait()
        except OSError: pass

def distance(a, b):
    """The distance between two coordinates.
    Suited for RT90 coordinates: expect integers
    and rounds to integers (because sub-meter resolution
    is unlikely to matter)
    """
    x1, y1 = a
    x2, y2 = b
    dx = x1-x2
    dy = y1-y2
    dd = math.sqrt(dx*dx + dy*dy)
    return int(dd + .5)

if __name__ == "__main__":
    prog = os.path.split(sys.argv[0])[1]
    usage = 'usage: %s [-V] -f coordinate-file map-file' % prog
    try:
        opts, files = getopt.getopt(sys.argv[1:], 'Vf:')
        coords = None
        just_version = 0
        for option, value in opts:
            if option == '-f': coords = value
            if option == '-V': just_version = 1
        if just_version:
            import geese.version
            print '%s, part of Geese %s' % (prog, geese.version.version)
            print 'Copyright (c) 2004, 2005, 2006, 2007 Jörgen Grahn'
            sys.exit(0)
        if not coords:
            raise ValueError, 'argument -f missing'
        if len(files) != 1:
            raise ValueError, 'needs a single file name'
        file, = files
    except (ValueError, getopt.GetoptError), s:
        print >>sys.stderr, 'error:', s
        print >>sys.stderr, usage
        sys.exit(1)

    try:
        coords = library.parse(open(coords, "r"))
    except IOError, s:
        print >>sys.stderr, s
        sys.exit(1)

    themap = None
    for m in coords:
        if os.path.basename(file) in m.names:
            themap = m
            break
    if not themap:
        print >>sys.stderr, "found no entry for `%s', exiting" % file
        sys.exit(1)
    if themap.checksums and not md5sum(file) in themap.checksums:
        print >>sys.stderr,\
              '%s: bad checksum - mistrust the resulting coordinates!' % file

    # 1802,1387 = 183,147,112  #b79370  ( 29  38  71 HSV)  [  325,  135]
    xvpixel = re.compile(r'\s*(\d+),\s*(\d+)\s=')

    xv = Child('xv %s' % file)

    print 'geese_pick: displaying map ...'
    print 'one pixel is %.1f m wide' % themap.scale()
    ar = themap.area()
    if ar > 100000:
        print 'the map covers %.2f km²' % (ar/1.0e6)
    else:
        print 'the map covers %.0f m²' % ar

    lastc = None

    while 1:
        s = sys.stdin.readline()
        if not s: break
        m = xvpixel.match(s)
        if not m: continue
        x, y = map(int, m.groups())
        c = themap.coordOf(x, y)
        n, e = c
        print '1m: %d %d;' % (n,e),
        n, e = map(lambda n: (n+5)/10, c)
        print '10m: %d %d;' % (n,e),
        n, e = map(lambda n: (n+50)/100, c)
        print '100m: %d %d;' % (n,e),
        n, e = map(lambda n: (n+500)/1000, c)
        print '1km: %d %d' % (n,e)
        if lastc:
            print '    %dm from previous coordinate' % distance(lastc, c)
        lastc = c
