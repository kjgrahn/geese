#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
#
# $Id: geese_plot,v 1.13 2007-08-26 19:10:16 grahn Exp $
#
# Copyright (c) 2004, 2005, 2006, 2007 Jörgen Grahn
# All rights reserved.
#

import re
import os
import os.path
import tempfile
import getopt
import sys
import re
import md5
import Image
import ImageDraw
from geese import library
from geese import segrid

def md5sum(file):
    """Calculate the MD5 checksum of 'file'
    and return it as a string à la md5sum(1).
    """
    acc = md5.new()
    f = open(file, 'r')
    while 1:
        s = f.read(42*1024)
        if not s:
            break
        acc.update(s)
    f.close()
    return acc.hexdigest().lower()

class Painter:

    class Bullseye:

        def __init__(self, painter, color,
                     innerw, outerw):
            self._painter = painter
            if color=='black':
                self._innerc = painter.black
                self._outerc = painter.white
            elif color=='white':
                self._innerc = painter.white
                self._outerc = painter.black
            else:
                raise ValueError('unsupported color "%s"' % color)
            self._innerrad = (innerw+1)/2
            self._outerrad = (outerw+1)/2

        def draw(self, x, y):
            d = self._painter._draw
            for w, c in ((self._outerrad, self._outerc),
                         (self._innerrad, self._innerc)):
                d.ellipse((x-w, y-w, x+w, y+w), fill=c)

    def __init__(self, image):
        self._draw = ImageDraw.Draw(image)
        if image.mode == 'RGB':
            self.white = (255, 255, 255)
            self.black = (0, 0, 0)
            self.red = (100, 0, 0)
        elif image.mode == 'L':
            self.white = 255
            self.black = 0
            # "red is the new black"
            self.red = 0

    def bullseye(self, color, innerw, outerw):
        return self.Bullseye(self, color, innerw, outerw)

    def point(self, x, y):
        "Draw a red, filled circle at (x, y) in the drawable."
        self._draw.ellipse((x-10,y-10,x+10,y+10),
                           fill=self.red)
    def bull(self, x, y):
        "Draw a white circle with a black border."
        self.bullseye('white', 10, 16).draw(x, y)

    def cross(self, x, y):
        "Draw a red X at (x, y) in the drawable."
        self._draw.line((x-10,y-10,x+10,y+10),
                        fill=self.red)
        self._draw.line((x-10,y+10,x+10,y-10),
                        fill=self.red)

class Child:
    """Wrapper for a forked command which gets killed
    (if it's still alive) when the object dies.
    This part is Unix-specific.
    """
    def __init__(self, *argv):
        self.pid = os.fork()
        # workaround for python 2.1 weirdness (or my misuse)
        self.os = os
        if not self.pid:
            cmd = argv[0]
            try:
                os.execvp(cmd, argv)
            except OSError, s:
                print >>sys.stderr, "couldn't execute `%s':" % cmd ,
                print >>sys.stderr, str(s)
            sys.exit(-1)
    def __del__(self):
        try:
            self.os.kill(self.pid, 2)
            self.os.wait()
        except OSError: pass

class tempnam:
    """Python whines about os.tempnam. Here is something similar
    implemented via module tempfile. For some reason it includes
    a temporary directory ...
    """
    def __init__(self, dir, prefix):
        self.dirname = tempfile.mkdtemp(prefix=prefix, dir=dir)
        self.filename = os.path.join(self.dirname, 'geese')
        open(self.filename, 'w').close()
    def __str__(self):
        return self.filename
    def __del__(self):
        os.unlink(self.filename)
        os.rmdir(self.dirname)

if __name__ == "__main__":
    prog = os.path.split(sys.argv[0])[1]
    usage = 'usage: %s [-V] [-t format] -f coordinate-file map-file' % prog
    cusage = ('usage: north-coord east-coord\n'
              '       show\n'
              '       bullseye white|black width\n'
              '       help\n'
              '       exit')
    try:
        opts, files = getopt.getopt(sys.argv[1:], 'Vt:f:')
        coords = None
        just_version = 0
        encoding = 'jpeg'
        for option, value in opts:
            if option == '-f': coords = value
            if option == '-t': encoding = value
            if option == '-V': just_version = 1
        if just_version:
            import geese.version
            print '%s, part of Geese %s' % (prog, geese.version.version)
            print 'Copyright (C) 2004, 2005, 2006, 2007 Jörgen Grahn'
            sys.exit(0)
        if not coords:
            raise ValueError, 'argument -f missing'
        if len(files) != 1:
            raise ValueError, 'needs a single file name'
        file, = files
    except (ValueError, getopt.GetoptError), s:
        print >>sys.stderr, 'error:', s
        print >>sys.stderr, usage
        sys.exit(1)

    try:
        coords = library.parse(open(coords, "r"))
    except IOError, s:
        print >>sys.stderr, s
        sys.exit(1)

    themap = None
    for m in coords:
        if os.path.basename(file) in m.names:
            themap = m
            break
    if not themap:
        print >>sys.stderr, "found no entry for `%s', exiting" % file
        sys.exit(1)
    if themap.checksums and not md5sum(file) in themap.checksums:
        print >>sys.stderr,\
              '%s: bad checksum - mistrust the resulting coordinates!' % file

    print '%s: one pixel is %.1f m wide' % (file, themap.scale())
    ar = themap.area()
    if ar > 100000:
        print 'the map covers %.2f km²' % (ar/1.0e6)
    else:
        print 'the map covers %.0f m²' % ar

    img = Image.open(file)
    dimg = Painter(img)
    bull = dimg.bullseye('white', 10, 16)
    gridre = re.compile(r'(\d+)\s+(\d+)$')
    tmpname = tempnam(None, 'geese')

    while 1:
        s = sys.stdin.readline()
        if not s: break
        s = s.strip()
        m = gridre.match(s)
        if m:
            north, east = map(int, m.groups())
            while north < 1000000:
                north *= 10
                east *= 10
            x, y = themap.pixelOf(north, east)
            bull.draw(x, y)
            continue
        elif s=='show':
            print 'rendering ...',
            sys.stdout.flush()
            img.save(str(tmpname), encoding)
            print 'displaying ...',
            sys.stdout.flush()
            xv = Child('xv', str(tmpname))
            print 'ok'
            continue
        elif s.startswith('bullseye '):
            dummy, color, inw = s.split()
            inw = int(inw)
            bull = dimg.bullseye(color, inw, inw+2)
        elif s in ('h', '?', 'help'):
            print cusage
            continue
        elif s=='exit':
            break
        elif s=='':  continue
        else:
            print 'Uh? You said "%s"' % s
            print cusage
